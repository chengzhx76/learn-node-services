import "@wangeditor/editor/dist/css/style.css";

import React, { useState, useRef, useEffect } from "react";
import { Editor } from "@wangeditor/editor-for-react";
import { IDomEditor, IEditorConfig, Boot } from "@wangeditor/editor";
import uieditorModule from "../../module/uieditor";
Boot.registerModule(uieditorModule);
import mentionModule, { MentionElement } from "../../module/mention";
Boot.registerModule(mentionModule);

// import withBreakAndDelete from './withBreakAndDelete'
// Boot.registerPlugin(withBreakAndDelete)

const scenes_text = `山音麦：不算；
山音麦：滑蛋饭；
八谷绢：对吧，他们以为他们在听同一首歌，其实不是，他们俩现在听的就不是同一首歌；
八谷绢：那些音乐家和混录师在棚里扒盒饭熬通宵，几十遍几百遍地反复比较才把音乐做出来，结果呢？他们居然把左右声道分开
        听。
山音麦：混录师知道了，不得气得把盒饭拍台子上；
八谷绢：我去告诉他们吧`;

// 显示弹框
function showModal(editor: IDomEditor) {
  // 获取光标位置，定位 modal
  const domSelection = document.getSelection();
  const domRange = domSelection?.getRangeAt(0);
  if (domRange == null) return;
  const selectionRect = domRange.getBoundingClientRect();

  // 获取编辑区域 DOM 节点的位置，以辅助定位
  const containerRect = editor.getEditableContainer().getBoundingClientRect();

  // 显示 modal 弹框，并定位
  // PS：modal 需要自定义，如 <div> 或 Vue React 组件

  // 当触发某事件（如点击一个按钮）时，插入 mention 节点
}

function insertMention() {
  const mentionNode: MentionElement = {
    type: "mention", // 必须是 'mention'
    value: "张三", // 文本
    info: { x: 1, y: 2 }, // 其他信息，自定义
    children: [{ text: "" }], // 必须有一个空 text 作为 children
  };

  editor.restoreSelection(); // 恢复选区
  editor.deleteBackward("character"); // 删除 '@'
  editor.insertNode(mentionNode); // 插入 mention
  editor.move(1); // 移动光标
}

// 隐藏弹框
function hideModal(editor: IDomEditor) {
  console.log("====>hideModal");
  // 隐藏 modal
}

function CustomEditor() {
  // editor 实例
  const [editor, setEditor] = useState<IDomEditor | null>(null);
  const editorRef = useRef<IDomEditor | null>(null);

  // 编辑器内容
  // const [html, setHtml] = useState("<p>hello</p>");
  const [html, setHtml] = useState("");

  // 模拟 ajax 请求，异步设置 html
  /* useEffect(() => {
    setTimeout(() => {
      // setHtml('<p>hello world</p>')
      textToHtml();
    }, 2500);
  }, []); */

  /* const textToHtml = () => {
    const text = scenes_text; // text 内容
    // 1. 把 text 转换为 html
    const html = text
      .split(/\n/)
      .map((line) => `<p>${line}</p>`)
      .join("\n");
    setHtml(html);
  }; */

  // 编辑器配置
  const editorConfig: Partial<IEditorConfig> = {
    placeholder: "请输入内容...",
    EXTEND_CONF: {
      mentionConfig: {
        showModal, // 必须
        hideModal, // 必须
      },
    },
  };

  // 及时销毁 editor ，重要！
  useEffect(() => {
    return () => {
      if (editor == null) return;
      editor.destroy();
      setEditor(null);
      editorRef.current = null;
    };
  }, [editor]);

  const handleCreated = (_editor: IDomEditor) => {
    if (_editor == null) return;
    console.log("handleCreated", _editor);
    setEditor(_editor);
    editorRef.current = _editor;

    // console.log("created.global.editor", editor, editorRef.current);
  };

  const handleChange = (_editor: IDomEditor) => {
    if (_editor == null) return;
    // console.log("handleChange", _editor);
    console.log("handleChange.getHtml()", _editor.getHtml());
    // setHtml(_editor.getHtml());
  };

  return (
    <>
      <div style={{ border: "1px solid #ccc", zIndex: 100 }}>
        <Editor
          defaultConfig={editorConfig}
          value={html}
          onCreated={handleCreated}
          onChange={handleChange}
          mode="default"
          style={{ height: "500px", overflowY: "hidden" }}
        />
      </div>
      <div style={{ marginTop: "15px" }}>{html}</div>
    </>
  );
}

export default CustomEditor;
